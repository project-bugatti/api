service: gcmedia-api # NOTE: update this with your service name

# You can pin your service to only deploy with a specific Serverless version
# Check out our docs for more details
# frameworkVersion: "=X.X.X"

provider:
  name: aws
  runtime: nodejs8.10
  environment:
    DB_HOST: ${file(./configs.yml):DB_HOST}
    DB_NAME: ${file(./configs.yml):DB_NAME}
    DB_USER: ${file(./configs.yml):DB_USER}
    DB_PASSWORD: ${file(./configs.yml):DB_PASSWORD}

# you can overwrite defaults here
#  stage: dev
#  region: us-east-1

# you can add statements to the Lambda function's IAM Role here
#  iamRoleStatements:
#    - Effect: "Allow"
#      Action:
#        - "s3:ListBucket"
#      Resource: { "Fn::Join" : ["", ["arn:aws:s3:::", { "Ref" : "ServerlessDeploymentBucket" } ] ]  }
#    - Effect: "Allow"
#      Action:
#        - "s3:PutObject"
#      Resource:
#        Fn::Join:
#          - ""
#          - - "arn:aws:s3:::"
#            - "Ref" : "ServerlessDeploymentBucket"
#            - "/*"

# you can define service wide environment variables here
#  environment:
#    variable1: value1

# you can add packaging information here
#package:
#  include:
#    - include-me.js
#    - include-me-dir/**
#  exclude:
#    - exclude-me.js
#    - exclude-me-dir/**

functions:
  GetMembers:
    handler: members.GetMembers
    events:
      - http:
          path: members/
          method: get
  GetMember:
    handler: members.GetMember
    events:
      - http:
          path: members/{member_id}
          method: get
  CreateMember:
    handler: members.CreateMember
    events:
      - http:
          path: members/
          method: post
  UpdateMember:
    handler: members.UpdateMember
    events:
      - http:
          path: members/{member_id}
          method: put
  ToggleMemberStatus:
    handler: members.ToggleMemberStatus
    events:
      - http:
          path: members/{member_id}/ToggleMemberStatus
          method: get
  GetQuotes:
    handler: quotes.GetQuotes
    events:
      - http:
          path: quotes/
          method: get
  GetQuote:
    handler: quotes.GetQuote
    events:
      - http:
          path: quotes/{quote_id}
          method: get
  CreateQuote:
    handler: quotes.CreateQuote
    events:
      - http:
          path: quotes
          method: post
  ToggleQuoteVisibility:
    handler: quotes.ToggleQuoteVisibility
    events:
      - http:
          path: quotes/{quote_id}/ToggleQuoteVisibility
          method: get

#    The following are a few example events you can configure
#    NOTE: Please make sure to change your handler code to work with those events
#    Check the event documentation for details
#    events:
#      - http:
#          path: users/create
#          method: get
#      - s3: ${env:BUCKET}
#      - schedule: rate(10 minutes)
#      - sns: greeter-topic
#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000
#      - alexaSkill: amzn1.ask.skill.xx-xx-xx-xx
#      - alexaSmartHome: amzn1.ask.skill.xx-xx-xx-xx
#      - iot:
#          sql: "SELECT * FROM 'some_topic'"
#      - cloudwatchEvent:
#          event:
#            source:
#              - "aws.ec2"
#            detail-type:
#              - "EC2 Instance State-change Notification"
#            detail:
#              state:
#                - pending
#      - cloudwatchLog: '/aws/lambda/hello'
#      - cognitoUserPool:
#          pool: MyUserPool
#          trigger: PreSignUp

#    Define function environment variables here
#    environment:
#      variable2: value2

# you can add CloudFormation resource templates here
#resources:
#  Resources:
#    NewResource:
#      Type: AWS::S3::Bucket
#      Properties:
#        BucketName: my-new-bucket
#  Outputs:
#     NewOutput:
#       Description: "Description for the output"
#       Value: "Some output value"
